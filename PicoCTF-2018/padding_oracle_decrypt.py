#!/usr/bin/env python2

# Generated by FeatherDuster
import cryptanalib as ca

from pwn import *
context.log_level = 'error'

num_calls = 0

# Only need to change this function for new attacks
# Return True if padding valid, else False
def padding_oracle(ciphertext):
    global num_calls
    num_calls += 1

    # Select local process or remote host/port
    p = process('./pkcs7.py')
    #p = remote('2018shell2.picoctf.com', 27533)

    p.recvuntil('What is your cookie?')
    c = ciphertext.encode('hex')
    p.sendline(c)
    ret = p.recvall()
    if not 'invalid' in ret:
	#print ret
	p.close()
	return True
    p.close()
    return False

# Change ciphertext before running decrypt.
chex = '5468697320697320616e20495634353689eef8e542fbab50598d9a77927f9b37ed227d5dc529561f21fa53c6c7b7d30a24f13d9d233537a52b30bf80badc0ab6dff2a079d24d4b67a0154499fed3de9845ba51c04037c76d1c4a5a705fcf19a7'
# First 32 hex characters (16 bytes)
iv = chex[:32]
# Rest
chex = chex[32:]

# Decrypt!
m = ca.padding_oracle_decrypt(padding_oracle=padding_oracle, ciphertext=chex.decode('hex'), block_size=16, padding_type='pkcs7', iv='5468697320697320616e204956343536'.decode('hex'), verbose=True, hollywood=True)

print ''
print 'Result in hex: ' + m.encode('hex')
print ''
print 'RAW RESULT'
print m
print 'END OF RAW RESULT'
print 'Number of calls to padding_oracle: ' + str(num_calls)

# Send custom message with valid encryption without knowing the key...
#    {"username": "guest", "expires": "2000-01-07", "is_admin": "false"}
#e = '{"username": "guest", "expires": "2020-01-07", "is_admin":  "true"}'
# To encrypt the first command line argument:
#newc = ca.cbcr(e, oracle=padding_oracle, is_padding_oracle=True, block_size=16, verbose=True)
#print newc
#print ''
#print 'Your new ciphertext is: ' + newc.encode('hex')
